import{base58 as e}from"@scure/base";import{isHex as t}from"viem";import{getWalletApiImportInitPath as r,getWalletApiImportSubmitPath as p}from"../paths.mjs";import{encryptHPKEMessage as n,translateOwnerInput as a,translateSignersInput as i}from"./utils.mjs";import"@hpke/chacha20poly1305";import"@hpke/core";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../constants.mjs";import"../errors.mjs";let y=({entropy:r,entropyType:p,chainType:n})=>{switch(p){case"private-key":return(({entropy:r,chainType:p})=>{switch(p){case"ethereum":let p=r.startsWith("0x")?r:`0x${r}`;if(!t(p))throw Error("Invalid entropy: Ethereum entropy must be hex encoded");return new Uint8Array(Buffer.from(p.replace(/^0x/,""),"hex"));case"solana":let n;try{n=e.decode(r)}catch(e){throw Error("Invalid entropy: Solana entropy must be base58 encoded")}return n}})({entropy:r,chainType:n});case"hd":return(({entropy:e})=>Buffer.from(e,"utf-8"))({entropy:r})}};const o=async(e,t)=>{let o=y({entropy:t.entropy,entropyType:t.entropyType,chainType:t.chainType}),{encryption_public_key:s}=await(async({apiClient:e,input:t})=>{let p;p="hd"===t.entropyType?{chain_type:t.chainType,address:t.address,entropy_type:t.entropyType,index:t.index,encryption_type:"HPKE"}:{chain_type:t.chainType,address:t.address,entropy_type:t.entropyType,encryption_type:"HPKE"};let{data:n}=await e.post(r(),p);return n})({apiClient:e,input:t}),{encapsulatedKey:c,ciphertext:h}=await n({encryptionPublicKey:new Uint8Array(Buffer.from(s,"base64")),plaintext:o});return await(async({apiClient:e,input:t,encapsulatedKey:r,ciphertext:n})=>{let y={wallet:"hd"===t.entropyType?{chain_type:t.chainType,address:t.address,encryption_type:"HPKE",ciphertext:n,encapsulated_key:r,entropy_type:t.entropyType,index:t.index}:{chain_type:t.chainType,address:t.address,encryption_type:"HPKE",ciphertext:n,encapsulated_key:r,entropy_type:t.entropyType},...a({input:t}),...i({input:t})},{data:o}=await e.post(p(),y);return o})({apiClient:e,input:t,encapsulatedKey:Buffer.from(c).toString("base64"),ciphertext:Buffer.from(h).toString("base64")})};export{o as handleWalletImport};
